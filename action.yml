name: sphinx-to-branch
author: Tufts University
description: build sphinx documentation and push results to gh-pages
branding:
  icon: file-text
  color: blue

inputs:
  source-branch:
    description: |
      Branch to build documentation from. Defaults to the triggering branch
    required: false
    default: ${{ github.ref_name }}
  destination-branch:
    description: |
      Branch to push built the documentation to. Defaults to `gh-pages` branch.
    required: false
    default: gh-pages
  clear-destination:
    description: |
      Whether to delete all files from the destination branch before building.
      Must be set to "true" for deletion to occur. Other values ignored.
    required: false
    default: "false"
  remove-items:
    description: |
      Newline-delimited list of glob patters to delete from the destination
      branch before building. Ignored if destination branch set to be cleared.
    required: false
    default: ""
  source-directory:
    description: |
      Directory on source branch containing documentation source files.
      Defaults to repository root.
    required: false
    default: ""
  destination-directory:
    description: |
      Directory on destination branch to push the built documentation to.
      Defaults to repository root.
    required: false
    default: ""
  environment-file:
    description: |
      Conda environment YML file on source branch to install dependencies from.
      Must contain Sphinx and any other build dependencies.
      Defaults to `environment.yml` in repository root.
    required: false
    default: environment.yml
  build-command:
    description: |
      Command to build the documentation. Uses `sphinx-build` if omitted.
    required: false
    default: sphinx-build
  build-arguments:
    description: |
      Additional optional arguments to pass to the build command.
    required: false
    default: ""
  add-nojekyll:
    description: |
      Whether to add a `.nojekyll` file to the root of the destination branch.
      Must be set to "true" for the file to be added. Other values ignored.
    required: false
    default: "true"
  commit-message:
    description: |
      Message to use when committing built documentation to destination branch.
      Defaults to the SHA of the triggering commit.
    required: false
    default: ${{ github.sha }}
  use-bot:
    description: |
      Whether to use the github-actions[bot] account to commit and push changes.
      Must be set to "true" for the bot to be used. Other values ignored.
      (Author of the last commit on the source branch used by default.)
    required: false
    default: "false"
  dry-run:
    description: |
      Whether to run the action without pushing to the destination branch.
      Must be set to "true" for dry run to occur. Other values ignored.
      Can be used as a pull request status check confirming a successful build.
      (Destination branch will need to be cleared to ensure a clean build.)
    required: false
    default: "false"
  use-expect:
    description: |
      Whether to use `expect` to perform actions based on build console output.
      Must be set to "true" for `expect` to be used. Other values ignored.
    required: false
    default: "false"
  expect-timeout:
    description: |
      Number of seconds `expect` will wait for the build to complete.
      Must be an integer. Defaults to -1, which disables the timeout.
      Default timeout behavior is to quit the build and quietly exit success.
      Use `expect-pattern-action` to configure an alternate timeout behavior.
    required: false
    default: -1
  expect-pattern-action:
    description: |
      Pattern-action pairs passed to `expect` when monitoring console output.
      See `man expect` and action README for examples and syntax details.
      Any timeout action must be specified here using the `timeout` pattern.
      Variable $EXPECT_TIMEOUT (value of `expect-timeout`) available for use.
    required: false
    default: ""

runs:
  using: composite
  steps:
    - id: install-expect
      if: ${{ inputs.use-expect == 'true' }}
      run: sudo apt-get update; sudo apt-get install --quiet --yes expect
      shell: bash
    - id: allow-execution
      run: chmod +x ${{ github.action_path }}/*.sh
      shell: bash
    - id: checkout-source
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.source-branch }}
        path: source
    - id: setup-environment
      uses: mamba-org/setup-micromamba@v2
      with:
        environment-file: source/${{ inputs.environment-file }}
        init-shell: bash
    - id: configure-git
      run: ${{ github.action_path }}/configure-git.sh
      shell: bash
      env:
        REPO_PATH: source
        USE_BOT: ${{ inputs.use-bot }}
    - id: checkout-destination
      uses: actions/checkout@v4
      with:
        path: destination
    - id: setup-destination
      run: ${{ github.action_path }}/setup-destination.sh
      shell: bash
      env:
        BRANCH: ${{ inputs.destination-branch }}
        CLEAR: ${{ inputs.clear-destination }}
        REPO_PATH: destination
        RM_LIST: ${{ inputs.remove-items }}
    - id: write-expect
      if: ${{ inputs.use-expect == 'true' }}
      run: ${{ github.action_path }}/write-expect.sh
      shell: bash
      env:
        BUILD_ARGS: ${{ inputs.build-arguments }}
        BUILD_CMD: ${{ inputs.build-command }}
        EXPECT_PATTERNS: ${{ inputs.expect-pattern-action }}
        EXPECT_SCRIPT: ${{ github.action_path }}/build.exp
        EXPECT_TIMEOUT: ${{ inputs.expect-timeout }}
        OUT_BRANCH: destination
        OUT_DIR: ${{ inputs.destination-directory }}
        SRC_BRANCH: source
        SRC_DIR: ${{ inputs.source-directory }}
    - id: build-expect
      if: ${{ inputs.use-expect == 'true' }}
      run: ${{ github.action_path }}/build.exp
      shell: bash -el {0}
    - id: build-vanilla
      if: ${{ steps.build-expect.outcome == 'skipped' }}
      run: $BUILD_CMD $BUILD_ARGS "source/$SRC_DIR" "destination/$OUT_DIR"
      shell: bash -el {0}
      env:
        BUILD_ARGS: ${{ inputs.build-arguments }}
        BUILD_CMD: ${{ inputs.build-command }}
        OUT_DIR: ${{ inputs.destination-directory }}
        SRC_DIR: ${{ inputs.source-directory }}
    - id: deploy-artifacts
      if: ${{ inputs.dry-run != 'true' }}
      run: ${{ github.action_path }}/deploy-artifacts.sh
      shell: bash
      env:
        ADD_NOJEKYLL: ${{ inputs.add-nojekyll }}
        BRANCH: ${{ inputs.destination-branch }}
        MESSAGE: ${{ inputs.commit-message }}
        REPO_PATH: destination
